name: CI & Publish (artifact-based with debug)

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  test:
    name: test (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.9", "3.10", "3.11", "3.12" ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - name: Install deps for tests
        run: |
          python -m pip install --upgrade pip
          pip install pytest
      - name: Run tests
        run: pytest -q || echo "No tests found, skipping."

  build:
    name: build package (once)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build dist (sdist+wheel)
        run: |
          python -m build
          ls -l dist
      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  publish-pypi:
    name: publish to PyPI (from artifact, with debug)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Show GitHub context (event/ref)
        id: ctx
        run: |
          echo "event_name=${{ github.event_name }}"
          echo "ref=${{ github.ref }}"
          echo "ref_name=${{ github.ref_name }}"
          echo "repository=${{ github.repository }}"
          echo "actor=${{ github.actor }}"
          echo "run_id=${{ github.run_id }}"
          echo "run_number=${{ github.run_number }}"
          echo "sha=${{ github.sha }}"
          echo "== ALL ENV KEYS =="
          env | sort

      - name: Decide if we should publish
        id: decide
        shell: bash
        run: |
          SHOULD=false
          if [[ "${{ github.event_name }}" == "release" ]]; then
            SHOULD=true
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SHOULD=true
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
            SHOULD=true
          fi
          echo "should_publish=$SHOULD" | tee -a "$GITHUB_OUTPUT"
          echo "Decision: should_publish=$SHOULD"
          if [[ "$SHOULD" != "true" ]]; then
            echo "::notice::Not publishing because event/ref do not match (need release/workflow_dispatch or push tag 'v*')."
          fi

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Inspect downloaded files
        run: |
          echo "== DOWNLOADED DIST =="
          ls -l dist || true

      - name: Verify files exist
        id: verify
        shell: bash
        run: |
          set -e
          COUNT=$(ls -1 dist 2>/dev/null | wc -l | tr -d ' ')
          echo "files_in_dist=$COUNT" | tee -a "$GITHUB_OUTPUT"
          if [[ "$COUNT" -eq 0 ]]; then
            echo "::error::No files found in dist/ artifact."
            exit 1
          fi

      - name: Print package metadata (best effort)
        continue-on-error: true
        run: |
          echo "== PYPROJECT.TOML (if present) =="
          (test -f pyproject.toml && sed -n '1,160p' pyproject.toml) || echo "(not in repo root)"
          echo "== SETUP.CFG (if present) =="
          (test -f setup.cfg && sed -n '1,160p' setup.cfg) || echo "(not in repo root)"

      - name: Dry-run upload to PyPI (twine check)
        if: steps.decide.outputs.should_publish == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install twine==6.0.1
          twine check dist/*

      - name: Publish to PyPI
        if: steps.decide.outputs.should_publish == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Explain why publish step was skipped
        if: steps.decide.outputs.should_publish != 'true'
        run: |
          echo "::warning::Publish step intentionally skipped by decision gate."
          echo "Event was: ${{ github.event_name }}"
          echo "Ref was:   ${{ github.ref }}"
          echo "To publish, use one of:"
          echo "  - push a tag starting with 'v' (e.g., v0.1.0)"
          echo "  - publish a GitHub Release"
          echo "  - run this workflow manually (workflow_dispatch)"